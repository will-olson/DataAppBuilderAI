{"ast":null,"code":"var _jsxFileName = \"/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/ChurnPredictionPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Container, Typography, Card, CardContent, Chip, List, ListItem, ListItemText, CircularProgress } from '@mui/material';\nimport { fetchChurnPredictionData } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChurnPredictionPage = () => {\n  _s();\n  const [churnData, setChurnData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchChurnData = async () => {\n      try {\n        console.log('Fetching churn data started');\n        setLoading(true);\n        const data = await fetchChurnPredictionData();\n        console.log('Received churn data:', data);\n\n        // Validate data structure\n        if (!data) {\n          throw new Error('No data received');\n        }\n\n        // Validate specific properties\n        if (typeof data.overallChurnRisk === 'undefined' || !Array.isArray(data.highRiskSegments) || !Array.isArray(data.churnFactors)) {\n          throw new Error('Invalid data structure');\n        }\n        setChurnData(data);\n        setLoading(false);\n      } catch (error) {\n        console.error('Detailed churn prediction fetch error:', error);\n        setError(error);\n        setLoading(false);\n      }\n    };\n    fetchChurnData();\n  }, []);\n\n  // Loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"Loading Churn Prediction...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this);\n  }\n\n  // Error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        color: \"error\",\n        children: [\"Error loading churn prediction data: \", error.message]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this);\n  }\n\n  // Ensure churnData exists before rendering\n  if (!churnData) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No churn prediction data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \"Churn Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: [\"Overall Churn Risk: \", (churnData.overallChurnRisk * 100).toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"High-Risk Segments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this), churnData.highRiskSegments.map((segment, index) => /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${segment.name}: ${(segment.churnRisk * 100).toFixed(2)}%`,\n          color: \"warning\"\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Key Churn Factors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: churnData.churnFactors.map((factor, index) => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: factor.name,\n              secondary: `Impact: ${(factor.impact * 100).toFixed(2)}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 7\n  }, this);\n};\n_s(ChurnPredictionPage, \"depmSAAvaNDOu2AI9NPPL8JQDkU=\");\n_c = ChurnPredictionPage;\nexport default ChurnPredictionPage;\nvar _c;\n$RefreshReg$(_c, \"ChurnPredictionPage\");","map":{"version":3,"names":["React","useState","useEffect","Container","Typography","Card","CardContent","Chip","List","ListItem","ListItemText","CircularProgress","fetchChurnPredictionData","jsxDEV","_jsxDEV","ChurnPredictionPage","_s","churnData","setChurnData","loading","setLoading","error","setError","fetchChurnData","console","log","data","Error","overallChurnRisk","Array","isArray","highRiskSegments","churnFactors","children","fileName","_jsxFileName","lineNumber","columnNumber","color","message","variant","toFixed","map","segment","index","label","name","churnRisk","factor","primary","secondary","impact","_c","$RefreshReg$"],"sources":["/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/ChurnPredictionPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { \n  Container, \n  Typography, \n  Card, \n  CardContent, \n  Chip,\n  List,\n  ListItem,\n  ListItemText,\n  CircularProgress\n} from '@mui/material';\nimport { fetchChurnPredictionData } from '../../services/api';\n\nconst ChurnPredictionPage = () => {\n    const [churnData, setChurnData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n  \n    useEffect(() => {\n      const fetchChurnData = async () => {\n        try {\n          console.log('Fetching churn data started');\n          setLoading(true);\n          \n          const data = await fetchChurnPredictionData();\n          \n          console.log('Received churn data:', data);\n          \n          // Validate data structure\n          if (!data) {\n            throw new Error('No data received');\n          }\n          \n          // Validate specific properties\n          if (\n            typeof data.overallChurnRisk === 'undefined' ||\n            !Array.isArray(data.highRiskSegments) ||\n            !Array.isArray(data.churnFactors)\n          ) {\n            throw new Error('Invalid data structure');\n          }\n          \n          setChurnData(data);\n          setLoading(false);\n        } catch (error) {\n          console.error('Detailed churn prediction fetch error:', error);\n          setError(error);\n          setLoading(false);\n        }\n      };\n  \n      fetchChurnData();\n    }, []);\n  \n    // Loading state\n    if (loading) {\n      return (\n        <Container>\n          <CircularProgress />\n          <Typography>Loading Churn Prediction...</Typography>\n        </Container>\n      );\n    }\n  \n    // Error state\n    if (error) {\n      return (\n        <Container>\n          <Typography color=\"error\">\n            Error loading churn prediction data: {error.message}\n          </Typography>\n        </Container>\n      );\n    }\n  \n    // Ensure churnData exists before rendering\n    if (!churnData) {\n      return (\n        <Container>\n          <Typography>No churn prediction data available</Typography>\n        </Container>\n      );\n    }\n  \n    return (\n      <Container>\n        <Typography variant=\"h4\">Churn Prediction</Typography>\n        \n        <Card>\n          <CardContent>\n            <Typography variant=\"h5\">\n              Overall Churn Risk: {(churnData.overallChurnRisk * 100).toFixed(2)}%\n            </Typography>\n            \n            <Typography variant=\"h6\">High-Risk Segments</Typography>\n            {churnData.highRiskSegments.map((segment, index) => (\n              <Chip \n                key={index}\n                label={`${segment.name}: ${(segment.churnRisk * 100).toFixed(2)}%`} \n                color=\"warning\" \n              />\n            ))}\n            \n            <Typography variant=\"h6\">Key Churn Factors</Typography>\n            <List>\n              {churnData.churnFactors.map((factor, index) => (\n                <ListItem key={index}>\n                  <ListItemText \n                    primary={factor.name} \n                    secondary={`Impact: ${(factor.impact * 100).toFixed(2)}%`} \n                  />\n                </ListItem>\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n      </Container>\n    );\n  };\n\nexport default ChurnPredictionPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SACEC,SAAS,EACTC,UAAU,EACVC,IAAI,EACJC,WAAW,EACXC,IAAI,EACJC,IAAI,EACJC,QAAQ,EACRC,YAAY,EACZC,gBAAgB,QACX,eAAe;AACtB,SAASC,wBAAwB,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9D,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAC,IAAI,CAAC;EAExCC,SAAS,CAAC,MAAM;IACd,MAAMqB,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACFC,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;QAC1CL,UAAU,CAAC,IAAI,CAAC;QAEhB,MAAMM,IAAI,GAAG,MAAMd,wBAAwB,CAAC,CAAC;QAE7CY,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEC,IAAI,CAAC;;QAEzC;QACA,IAAI,CAACA,IAAI,EAAE;UACT,MAAM,IAAIC,KAAK,CAAC,kBAAkB,CAAC;QACrC;;QAEA;QACA,IACE,OAAOD,IAAI,CAACE,gBAAgB,KAAK,WAAW,IAC5C,CAACC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACK,gBAAgB,CAAC,IACrC,CAACF,KAAK,CAACC,OAAO,CAACJ,IAAI,CAACM,YAAY,CAAC,EACjC;UACA,MAAM,IAAIL,KAAK,CAAC,wBAAwB,CAAC;QAC3C;QAEAT,YAAY,CAACQ,IAAI,CAAC;QAClBN,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdG,OAAO,CAACH,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;QAC9DC,QAAQ,CAACD,KAAK,CAAC;QACfD,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIJ,OAAO,EAAE;IACX,oBACEL,OAAA,CAACX,SAAS;MAAA8B,QAAA,gBACRnB,OAAA,CAACH,gBAAgB;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACpBvB,OAAA,CAACV,UAAU;QAAA6B,QAAA,EAAC;MAA2B;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC;EAEhB;;EAEA;EACA,IAAIhB,KAAK,EAAE;IACT,oBACEP,OAAA,CAACX,SAAS;MAAA8B,QAAA,eACRnB,OAAA,CAACV,UAAU;QAACkC,KAAK,EAAC,OAAO;QAAAL,QAAA,GAAC,uCACa,EAACZ,KAAK,CAACkB,OAAO;MAAA;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ,CAAC;EAEhB;;EAEA;EACA,IAAI,CAACpB,SAAS,EAAE;IACd,oBACEH,OAAA,CAACX,SAAS;MAAA8B,QAAA,eACRnB,OAAA,CAACV,UAAU;QAAA6B,QAAA,EAAC;MAAkC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAEhB;EAEA,oBACEvB,OAAA,CAACX,SAAS;IAAA8B,QAAA,gBACRnB,OAAA,CAACV,UAAU;MAACoC,OAAO,EAAC,IAAI;MAAAP,QAAA,EAAC;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEtDvB,OAAA,CAACT,IAAI;MAAA4B,QAAA,eACHnB,OAAA,CAACR,WAAW;QAAA2B,QAAA,gBACVnB,OAAA,CAACV,UAAU;UAACoC,OAAO,EAAC,IAAI;UAAAP,QAAA,GAAC,sBACH,EAAC,CAAChB,SAAS,CAACW,gBAAgB,GAAG,GAAG,EAAEa,OAAO,CAAC,CAAC,CAAC,EAAC,GACrE;QAAA;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eAEbvB,OAAA,CAACV,UAAU;UAACoC,OAAO,EAAC,IAAI;UAAAP,QAAA,EAAC;QAAkB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,EACvDpB,SAAS,CAACc,gBAAgB,CAACW,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC7C9B,OAAA,CAACP,IAAI;UAEHsC,KAAK,EAAE,GAAGF,OAAO,CAACG,IAAI,KAAK,CAACH,OAAO,CAACI,SAAS,GAAG,GAAG,EAAEN,OAAO,CAAC,CAAC,CAAC,GAAI;UACnEH,KAAK,EAAC;QAAS,GAFVM,KAAK;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGX,CACF,CAAC,eAEFvB,OAAA,CAACV,UAAU;UAACoC,OAAO,EAAC,IAAI;UAAAP,QAAA,EAAC;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACvDvB,OAAA,CAACN,IAAI;UAAAyB,QAAA,EACFhB,SAAS,CAACe,YAAY,CAACU,GAAG,CAAC,CAACM,MAAM,EAAEJ,KAAK,kBACxC9B,OAAA,CAACL,QAAQ;YAAAwB,QAAA,eACPnB,OAAA,CAACJ,YAAY;cACXuC,OAAO,EAAED,MAAM,CAACF,IAAK;cACrBI,SAAS,EAAE,WAAW,CAACF,MAAM,CAACG,MAAM,GAAG,GAAG,EAAEV,OAAO,CAAC,CAAC,CAAC;YAAI;cAAAP,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D;UAAC,GAJWO,KAAK;YAAAV,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAKV,CACX;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEhB,CAAC;AAACrB,EAAA,CAzGED,mBAAmB;AAAAqC,EAAA,GAAnBrC,mBAAmB;AA2GzB,eAAeA,mBAAmB;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}