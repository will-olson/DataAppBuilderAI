{"ast":null,"code":"var _jsxFileName = \"/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/Segmentation.js\",\n  _s = $RefreshSig$();\n// src/pages/Segmentation.js\nimport React, { useState, useEffect } from 'react';\nimport { fetchUserSegments } from '../../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Segmentation = () => {\n  _s();\n  // State management for segments\n  const [segments, setSegments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch segments on component mount\n  useEffect(() => {\n    const loadSegments = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchUserSegments();\n\n        // Validate and process data\n        if (Array.isArray(data)) {\n          setSegments(data);\n        } else {\n          throw new Error('Invalid data format');\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching segments:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    loadSegments();\n  }, []);\n\n  // Color mapping for segments\n  const getSegmentColor = segmentName => {\n    const colorMap = {\n      'High Engagement': '#4caf50',\n      // Green\n      'Medium Engagement': '#ff9800',\n      // Orange\n      'Low Engagement': '#f44336' // Red\n    };\n    return colorMap[segmentName] || '#2196f3'; // Default blue\n  };\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Loading Segments...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        color: \"error\",\n        children: \"Error Loading Segments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"User Segments Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: segments.map((segment, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            height: '100%',\n            borderLeft: `5px solid ${getSegmentColor(segment.name)}`\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: [segment.name, \" Segment\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"User Count: \", segment.userCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Average Lifetime Value: $\", segment.avgLTV.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Churn Risk: \", (segment.avgChurnRisk * 100).toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Segment Insights\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: segments.length > 0 ? `We have identified ${segments.length} distinct user segments with varying engagement levels.` : 'No segments found.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(Segmentation, \"9hl3wH5Yt4BFNwVtOHiP/6n5bvk=\");\n_c = Segmentation;\nexport default Segmentation;\nvar _c;\n$RefreshReg$(_c, \"Segmentation\");","map":{"version":3,"names":["React","useState","useEffect","fetchUserSegments","jsxDEV","_jsxDEV","Segmentation","_s","segments","setSegments","loading","setLoading","error","setError","loadSegments","data","Array","isArray","Error","err","console","message","getSegmentColor","segmentName","colorMap","Container","children","Typography","variant","fileName","_jsxFileName","lineNumber","columnNumber","LinearProgress","color","gutterBottom","Grid","container","spacing","map","segment","index","item","xs","md","Card","sx","height","borderLeft","name","CardContent","component","userCount","avgLTV","toFixed","avgChurnRisk","mt","length","_c","$RefreshReg$"],"sources":["/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/Segmentation.js"],"sourcesContent":["// src/pages/Segmentation.js\nimport React, { useState, useEffect } from 'react';\nimport { \n  fetchUserSegments \n} from '../../services/api';\n\nconst Segmentation = () => {\n  // State management for segments\n  const [segments, setSegments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch segments on component mount\n  useEffect(() => {\n    const loadSegments = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchUserSegments();\n        \n        // Validate and process data\n        if (Array.isArray(data)) {\n          setSegments(data);\n        } else {\n          throw new Error('Invalid data format');\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching segments:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    loadSegments();\n  }, []);\n\n  // Color mapping for segments\n  const getSegmentColor = (segmentName) => {\n    const colorMap = {\n      'High Engagement': '#4caf50',  // Green\n      'Medium Engagement': '#ff9800', // Orange\n      'Low Engagement': '#f44336'     // Red\n    };\n    return colorMap[segmentName] || '#2196f3'; // Default blue\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <Container>\n        <Typography variant=\"h4\">Loading Segments...</Typography>\n        <LinearProgress />\n      </Container>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <Container>\n        <Typography variant=\"h4\" color=\"error\">\n          Error Loading Segments\n        </Typography>\n        <Typography variant=\"body1\">{error}</Typography>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" gutterBottom>\n        User Segments Analysis\n      </Typography>\n\n      <Grid container spacing={3}>\n        {segments.map((segment, index) => (\n          <Grid item xs={12} md={4} key={index}>\n            <Card \n              sx={{ \n                height: '100%', \n                borderLeft: `5px solid ${getSegmentColor(segment.name)}` \n              }}\n            >\n              <CardContent>\n                <Typography variant=\"h5\" component=\"div\">\n                  {segment.name} Segment\n                </Typography>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  User Count: {segment.userCount}\n                </Typography>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Average Lifetime Value: ${segment.avgLTV.toFixed(2)}\n                </Typography>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Churn Risk: {(segment.avgChurnRisk * 100).toFixed(2)}%\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Optional: Segment Insights Summary */}\n      <Card sx={{ mt: 3 }}>\n        <CardContent>\n          <Typography variant=\"h6\">Segment Insights</Typography>\n          <Typography variant=\"body2\">\n            {segments.length > 0 \n              ? `We have identified ${segments.length} distinct user segments with varying engagement levels.`\n              : 'No segments found.'}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Segmentation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}