{"ast":null,"code":"var _jsxFileName = \"/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/Segmentation.js\",\n  _s = $RefreshSig$();\n// src/pages/Segmentation.js\nimport React, { useState, useEffect } from 'react';\nimport { fetchUserSegments } from '../services/api';\n\n// Optional: If you want to use Material-UI for styling\nimport { Container, Typography, Grid, Card, CardContent, LinearProgress } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Segmentation = () => {\n  _s();\n  // State management for segments\n  const [segments, setSegments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch segments on component mount\n  useEffect(() => {\n    const loadSegments = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchUserSegments();\n\n        // Validate and process data\n        if (Array.isArray(data)) {\n          setSegments(data);\n        } else {\n          throw new Error('Invalid data format');\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching segments:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n    loadSegments();\n  }, []);\n\n  // Color mapping for segments\n  const getSegmentColor = segmentName => {\n    const colorMap = {\n      'High Engagement': '#4caf50',\n      // Green\n      'Medium Engagement': '#ff9800',\n      // Orange\n      'Low Engagement': '#f44336' // Red\n    };\n    return colorMap[segmentName] || '#2196f3'; // Default blue\n  };\n\n  // Render loading state\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        children: \"Loading Segments...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  }\n\n  // Render error state\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        color: \"error\",\n        children: \"Error Loading Segments\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      gutterBottom: true,\n      children: \"User Segments Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: segments.map((segment, index) => /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            height: '100%',\n            borderLeft: `5px solid ${getSegmentColor(segment.name)}`\n          },\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h5\",\n              component: \"div\",\n              children: [segment.name, \" Segment\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"User Count: \", segment.userCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Average Lifetime Value: $\", segment.avgLTV.toFixed(2)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body2\",\n              color: \"text.secondary\",\n              children: [\"Churn Risk: \", (segment.avgChurnRisk * 100).toFixed(2), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mt: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Segment Insights\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          children: segments.length > 0 ? `We have identified ${segments.length} distinct user segments with varying engagement levels.` : 'No segments found.'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Segmentation, \"9hl3wH5Yt4BFNwVtOHiP/6n5bvk=\");\n_c = Segmentation;\nexport default Segmentation;\nvar _c;\n$RefreshReg$(_c, \"Segmentation\");","map":{"version":3,"names":["React","useState","useEffect","fetchUserSegments","Container","Typography","Grid","Card","CardContent","LinearProgress","jsxDEV","_jsxDEV","Segmentation","_s","segments","setSegments","loading","setLoading","error","setError","loadSegments","data","Array","isArray","Error","err","console","message","getSegmentColor","segmentName","colorMap","children","variant","fileName","_jsxFileName","lineNumber","columnNumber","color","gutterBottom","container","spacing","map","segment","index","item","xs","md","sx","height","borderLeft","name","component","userCount","avgLTV","toFixed","avgChurnRisk","mt","length","_c","$RefreshReg$"],"sources":["/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/Segmentation.js"],"sourcesContent":["// src/pages/Segmentation.js\nimport React, { useState, useEffect } from 'react';\nimport { \n  fetchUserSegments \n} from '../services/api';\n\n// Optional: If you want to use Material-UI for styling\nimport { \n  Container, \n  Typography, \n  Grid, \n  Card, \n  CardContent, \n  LinearProgress \n} from '@mui/material';\n\nconst Segmentation = () => {\n  // State management for segments\n  const [segments, setSegments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Fetch segments on component mount\n  useEffect(() => {\n    const loadSegments = async () => {\n      try {\n        setLoading(true);\n        const data = await fetchUserSegments();\n        \n        // Validate and process data\n        if (Array.isArray(data)) {\n          setSegments(data);\n        } else {\n          throw new Error('Invalid data format');\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching segments:', err);\n        setError(err.message);\n        setLoading(false);\n      }\n    };\n\n    loadSegments();\n  }, []);\n\n  // Color mapping for segments\n  const getSegmentColor = (segmentName) => {\n    const colorMap = {\n      'High Engagement': '#4caf50',  // Green\n      'Medium Engagement': '#ff9800', // Orange\n      'Low Engagement': '#f44336'     // Red\n    };\n    return colorMap[segmentName] || '#2196f3'; // Default blue\n  };\n\n  // Render loading state\n  if (loading) {\n    return (\n      <Container>\n        <Typography variant=\"h4\">Loading Segments...</Typography>\n        <LinearProgress />\n      </Container>\n    );\n  }\n\n  // Render error state\n  if (error) {\n    return (\n      <Container>\n        <Typography variant=\"h4\" color=\"error\">\n          Error Loading Segments\n        </Typography>\n        <Typography variant=\"body1\">{error}</Typography>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Typography variant=\"h4\" gutterBottom>\n        User Segments Analysis\n      </Typography>\n\n      <Grid container spacing={3}>\n        {segments.map((segment, index) => (\n          <Grid item xs={12} md={4} key={index}>\n            <Card \n              sx={{ \n                height: '100%', \n                borderLeft: `5px solid ${getSegmentColor(segment.name)}` \n              }}\n            >\n              <CardContent>\n                <Typography variant=\"h5\" component=\"div\">\n                  {segment.name} Segment\n                </Typography>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  User Count: {segment.userCount}\n                </Typography>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Average Lifetime Value: ${segment.avgLTV.toFixed(2)}\n                </Typography>\n                \n                <Typography variant=\"body2\" color=\"text.secondary\">\n                  Churn Risk: {(segment.avgChurnRisk * 100).toFixed(2)}%\n                </Typography>\n              </CardContent>\n            </Card>\n          </Grid>\n        ))}\n      </Grid>\n\n      {/* Optional: Segment Insights Summary */}\n      <Card sx={{ mt: 3 }}>\n        <CardContent>\n          <Typography variant=\"h6\">Segment Insights</Typography>\n          <Typography variant=\"body2\">\n            {segments.length > 0 \n              ? `We have identified ${segments.length} distinct user segments with varying engagement levels.`\n              : 'No segments found.'}\n          </Typography>\n        </CardContent>\n      </Card>\n    </Container>\n  );\n};\n\nexport default Segmentation;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}