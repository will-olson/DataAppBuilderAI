{"ast":null,"code":"var _jsxFileName = \"/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/ChurnPredictionPage.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChurnPredictionPage = () => {\n  _s();\n  const [churnData, setChurnData] = useState({\n    overallChurnRisk: 0,\n    highRiskSegments: [],\n    churnFactors: []\n  });\n  useEffect(() => {\n    const fetchChurnData = async () => {\n      try {\n        const data = await fetchChurnPredictionData();\n        setChurnData(data);\n      } catch (error) {\n        console.error('Churn prediction fetch error', error);\n      }\n    };\n    fetchChurnData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h4\",\n      children: \"Churn Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Card, {\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          children: [\"Overall Churn Risk: \", (churnData.overallChurnRisk * 100).toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"High-Risk Segments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this), churnData.highRiskSegments.map(segment => /*#__PURE__*/_jsxDEV(Chip, {\n          label: `${segment.name}: ${(segment.churnRisk * 100).toFixed(2)}%`,\n          color: \"warning\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Key Churn Factors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: churnData.churnFactors.map(factor => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: /*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: factor.name,\n              secondary: `Impact: ${(factor.impact * 100).toFixed(2)}%`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }, this);\n};\n_s(ChurnPredictionPage, \"6nrBguk9QoqZEh8CaQerbiATtGM=\");\n_c = ChurnPredictionPage;\nvar _c;\n$RefreshReg$(_c, \"ChurnPredictionPage\");","map":{"version":3,"names":["ChurnPredictionPage","_s","churnData","setChurnData","useState","overallChurnRisk","highRiskSegments","churnFactors","useEffect","fetchChurnData","data","fetchChurnPredictionData","error","console","_jsxDEV","Container","children","Typography","variant","fileName","_jsxFileName","lineNumber","columnNumber","Card","CardContent","toFixed","map","segment","Chip","label","name","churnRisk","color","List","factor","ListItem","ListItemText","primary","secondary","impact","_c","$RefreshReg$"],"sources":["/Users/willolson/Development/GrowthMarketingAI/client/src/components/pages/ChurnPredictionPage.js"],"sourcesContent":["const ChurnPredictionPage = () => {\n    const [churnData, setChurnData] = useState({\n      overallChurnRisk: 0,\n      highRiskSegments: [],\n      churnFactors: []\n    });\n  \n    useEffect(() => {\n      const fetchChurnData = async () => {\n        try {\n          const data = await fetchChurnPredictionData();\n          setChurnData(data);\n        } catch (error) {\n          console.error('Churn prediction fetch error', error);\n        }\n      };\n  \n      fetchChurnData();\n    }, []);\n  \n    return (\n      <Container>\n        <Typography variant=\"h4\">Churn Prediction</Typography>\n        \n        <Card>\n          <CardContent>\n            <Typography variant=\"h5\">\n              Overall Churn Risk: {(churnData.overallChurnRisk * 100).toFixed(2)}%\n            </Typography>\n            \n            <Typography variant=\"h6\">High-Risk Segments</Typography>\n            {churnData.highRiskSegments.map(segment => (\n              <Chip \n                label={`${segment.name}: ${(segment.churnRisk * 100).toFixed(2)}%`} \n                color=\"warning\" \n              />\n            ))}\n            \n            <Typography variant=\"h6\">Key Churn Factors</Typography>\n            <List>\n              {churnData.churnFactors.map(factor => (\n                <ListItem>\n                  <ListItemText \n                    primary={factor.name} \n                    secondary={`Impact: ${(factor.impact * 100).toFixed(2)}%`} \n                  />\n                </ListItem>\n              ))}\n            </List>\n          </CardContent>\n        </Card>\n      </Container>\n    );\n  };"],"mappings":";;;AAAA,MAAMA,mBAAmB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGC,QAAQ,CAAC;IACzCC,gBAAgB,EAAE,CAAC;IACnBC,gBAAgB,EAAE,EAAE;IACpBC,YAAY,EAAE;EAChB,CAAC,CAAC;EAEFC,SAAS,CAAC,MAAM;IACd,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF,MAAMC,IAAI,GAAG,MAAMC,wBAAwB,CAAC,CAAC;QAC7CR,YAAY,CAACO,IAAI,CAAC;MACpB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDH,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEK,OAAA,CAACC,SAAS;IAAAC,QAAA,gBACRF,OAAA,CAACG,UAAU;MAACC,OAAO,EAAC,IAAI;MAAAF,QAAA,EAAC;IAAgB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAY,CAAC,eAEtDR,OAAA,CAACS,IAAI;MAAAP,QAAA,eACHF,OAAA,CAACU,WAAW;QAAAR,QAAA,gBACVF,OAAA,CAACG,UAAU;UAACC,OAAO,EAAC,IAAI;UAAAF,QAAA,GAAC,sBACH,EAAC,CAACd,SAAS,CAACG,gBAAgB,GAAG,GAAG,EAAEoB,OAAO,CAAC,CAAC,CAAC,EAAC,GACrE;QAAA;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eAEbR,OAAA,CAACG,UAAU;UAACC,OAAO,EAAC,IAAI;UAAAF,QAAA,EAAC;QAAkB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,EACvDpB,SAAS,CAACI,gBAAgB,CAACoB,GAAG,CAACC,OAAO,iBACrCb,OAAA,CAACc,IAAI;UACHC,KAAK,EAAE,GAAGF,OAAO,CAACG,IAAI,KAAK,CAACH,OAAO,CAACI,SAAS,GAAG,GAAG,EAAEN,OAAO,CAAC,CAAC,CAAC,GAAI;UACnEO,KAAK,EAAC;QAAS;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChB,CACF,CAAC,eAEFR,OAAA,CAACG,UAAU;UAACC,OAAO,EAAC,IAAI;UAAAF,QAAA,EAAC;QAAiB;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAY,CAAC,eACvDR,OAAA,CAACmB,IAAI;UAAAjB,QAAA,EACFd,SAAS,CAACK,YAAY,CAACmB,GAAG,CAACQ,MAAM,iBAChCpB,OAAA,CAACqB,QAAQ;YAAAnB,QAAA,eACPF,OAAA,CAACsB,YAAY;cACXC,OAAO,EAAEH,MAAM,CAACJ,IAAK;cACrBQ,SAAS,EAAE,WAAW,CAACJ,MAAM,CAACK,MAAM,GAAG,GAAG,EAAEd,OAAO,CAAC,CAAC,CAAC;YAAI;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC3D;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CACX;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEhB,CAAC;AAACrB,EAAA,CArDED,mBAAmB;AAAAwC,EAAA,GAAnBxC,mBAAmB;AAAA,IAAAwC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}